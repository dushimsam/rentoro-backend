import { Controller, Inject, NotFoundException } from '@nestjs/common';
import { GrpcMethod, RpcException } from '@nestjs/microservices';
import { CarsService } from './cars.service';
// These types would normally come from generated code based on the .proto file
// For this subtask, we'll define them based on the .proto structure
// to guide the implementation.

// Interface for the GetCarRequest message
interface GetCarRequest {
  id: string;
}

// Interface for the Car message (matching cars.proto)
interface ProtoCar {
  id: string;
  make: string;
  model: string;
  year: number;
  license_plate: string; // snake_case from proto
  color: string;
  daily_rate: number;    // snake_case from proto
  is_available: boolean; // snake_case from proto
  is_validated: boolean; // snake_case from proto
  location: string;
  description: string;
  owner_id: string;      // snake_case from proto
  image_urls: string[];  // snake_case from proto
}

// Interface for the CarResponse message
interface CarResponse {
  car: ProtoCar;
}

// Interface for the ListCarsRequest message
interface ListCarsRequest {
  // Filters can be added here based on cars.proto
}

// Interface for the CarsResponse message
interface CarsResponse {
  cars: ProtoCar[];
}

// Mocking CarServiceControllerMethods and CarServiceController for the sake of NestJS metadata
// In a real setup, these would be generated by protoc-gen-ts
const CarServiceControllerMethods = () => (target: any) => {};
const CarServiceController = () => (target: any) => {};


@Controller() // No base path needed for gRPC controllers usually
@CarServiceController() // Simulates decorator for gRPC service definition
export class CarsGrpcController {
  constructor(
    @Inject(CarsService) private readonly carsService: CarsService
  ) {}

  @GrpcMethod('CarService', 'GetCar')
  async getCar(data: GetCarRequest): Promise<CarResponse> {
    try {
      const carEntity = await this.carsService.findOne(data.id);
      if (!carEntity) {
        // According to gRPC guidelines, NOT_FOUND is a standard error code.
        // RpcException can be used to send gRPC standard errors.
        throw new RpcException({ code: 5, message: 'Car not found' }); // 5 = NOT_FOUND
      }
      // Manual mapping from Car entity to ProtoCar
      const protoCar: ProtoCar = {
        id: carEntity.id,
        make: carEntity.make,
        model: carEntity.model,
        year: carEntity.year,
        license_plate: carEntity.licensePlate,
        color: carEntity.color,
        daily_rate: carEntity.dailyRate,
        is_available: carEntity.isAvailable,
        is_validated: carEntity.isValidated,
        location: carEntity.location,
        description: carEntity.description,
        owner_id: carEntity.ownerId,
        image_urls: carEntity.imageUrls || [], // Ensure imageUrls is an array
      };
      return { car: protoCar };
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw new RpcException({ code: 5, message: 'Car not found' }); // 5 = NOT_FOUND
      }
      // Re-throw other errors or handle them as needed
      throw new RpcException({ code: 2, message: error.message }); // 2 = UNKNOWN
    }
  }

  @GrpcMethod('CarService', 'ListCars')
  async listCars(data: ListCarsRequest): Promise<CarsResponse> {
    // Assuming findAll without filters for now
    // Pass an empty object for filters if findAll expects it, or adjust as per service definition
    const carEntities = await this.carsService.findAll({}); 
    const protoCars: ProtoCar[] = carEntities.map(carEntity => ({
      id: carEntity.id,
      make: carEntity.make,
      model: carEntity.model,
      year: carEntity.year,
      license_plate: carEntity.licensePlate,
      color: carEntity.color,
      daily_rate: carEntity.dailyRate,
      is_available: carEntity.isAvailable,
      is_validated: carEntity.isValidated,
      location: carEntity.location,
      description: carEntity.description,
      owner_id: carEntity.ownerId,
      image_urls: carEntity.imageUrls || [], // Ensure imageUrls is an array
    }));
    return { cars: protoCars };
  }
}
